# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  test-template: &test-template
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:2.7
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
      - image: redis:2.8
      - image: mongo:3.0
      - image: timescale/timescaledb-postgis:latest-pg11
        environment:
          POSTGRES_USER: erp
          POSTGRES_PASSWORD: erp

    working_directory: ~/src

    steps:
      - checkout:
          path: ~/src/powersms

      - run:
          name: Download required repositories
          command: |
            export ROOT_DIR_SRC=~/src
            git clone --depth 1 https://github.com/gisce/erp.git -b developer $ROOT_DIR_SRC/erp
            git clone --depth 1 https://github.com/gisce/oorq.git -b api_v5 $ROOT_DIR_SRC/oorq
            git clone --depth 1 https://github.com/gisce/spawn_oop.git $ROOT_DIR_SRC/spawn_oop
            git clone --depth 1 https://github.com/gisce/poweremail.git $ROOT_DIR_SRC/poweremail2
            git clone --depth 1 https://github.com/gisce/openerp-sentry.git -b v5_legacy $ROOT_DIR_SRC/openerp-sentry
            git clone --depth 1 https://github.com/gisce/ws_transactions.git $ROOT_DIR_SRC/ws_transactions
            git clone --depth 1 https://github.com/gisce/ir_attachment_mongodb.git $ROOT_DIR_SRC/ir_attachment_mongodb
            git clone --depth 1 https://github.com/gisce/mongodb_backend.git -b gisce $ROOT_DIR_SRC/mongodb_backend
            git clone --depth 1 https://github.com/gisce/poweremail_oorq.git $ROOT_DIR_SRC/poweremail_oorq
            git clone https://github.com/Som-Energia/plantmeter.git $ROOT_DIR_SRC/plantmeter
            git clone https://github.com/Som-Energia/somenergia-generationkwh.git $ROOT_DIR_SRC/somenergia-generationkwh

            curl -H "Authorization: token $GITHUB_TOKEN" -L https://api.github.com/repos/gisce/libFacturacioATR/tarball > /tmp/libFacturacioATR.tar.gz
            curl -H "Authorization: token $GITHUB_TOKEN" -L https://api.github.com/repos/gisce/pandapower_erp/tarball > /tmp/pandapower_erp.tar.gz
            curl -H "Authorization: token $GITHUB_TOKEN" -L https://api.github.com/repos/gisce/pandapower_validator/tarball > /tmp/pandapower_validator.tar.gz
            curl -H "Authorization: token $GITHUB_TOKEN" -L https://api.github.com/repos/gisce/ooop/tarball > /tmp/ooop.tar.gz

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "~/src/erp/requirements.txt" }}

      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install python-dev libxml2-dev libxmlsec1 libxmlsec1-dev -y
            export ROOT_DIR_SRC=~/src
            cd $ROOT_DIR_SRC
            virtualenv venv
            . $ROOT_DIR_SRC/venv/bin/activate
            file /tmp/libFacturacioATR.tar.gz | grep -q 'gzip' && pip install /tmp/libFacturacioATR.tar.gz || echo "Not installing libFacturacioATR library"
            file /tmp/pandapower_erp.tar.gz | grep -q 'gzip' && pip install /tmp/pandapower_erp.tar.gz || echo "Not installing pandapower_erp library"
            file /tmp/pandapower_validator.tar.gz | grep -q 'gzip' && pip install /tmp/pandapower_validator.tar.gz || echo "Not installing pandapower_validator library"
            pip install /tmp/ooop.tar.gz
            pip install -r $ROOT_DIR_SRC/erp/requirements-dev.txt
            pip install -r $ROOT_DIR_SRC/erp/requirements.txt
            #test -x $ROOT_DIR_SRC/powersms/requirements.txt && pip install -r $ROOT_DIR_SRC/powersms/requirements.txt


      - run:
          name: Install somenenergia-generation depencencies
          command: |
            . ~/src/venv/bin/activate
            cd ~/src/somenergia-generationkwh
            pip install -e . || "Not installing somenergia-generation Python package"
            cd ~/src/plantmeter
            pip install -e . || "Not installing plantmeter Python package"
            pip install coveralls

      - save_cache:
          paths:
            - ~/src/venv
          key: v2-dependencies-{{ checksum "~/src/erp/requirements.txt" }}

      - run:
          name: link addons
          command: |
            export ROOT_DIR_SRC=~/src
            . venv/bin/activate
            cd $ROOT_DIR_SRC/erp && python tools/link_addons.py
            ln -s ~/src/powersms ~/src/erp/server/bin/addons/powersms
        
      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            export CI_REPO=gisce/powersms
            export OPENERP_DB_HOST=localhost
            export OPENERP_DB_PORT=5432
            export OPENERP_DB_USER=erp
            export OPENERP_DB_PASSWORD=erp
            export OPENERP_REDIS_URL=redis://localhost:6379
            export OPENERP_MONGODB_HOST=localhost
            export OPENERP_PRICE_ACCURACY=6
            export ROOT_DIR_SRC=~/src
            export OPENERP_ADDONS_PATH=$ROOT_DIR_SRC/erp/server/bin/addons
            export OPENERP_ROOT_PATH=$ROOT_DIR_SRC/erp/server/bin
            export OORQ_ASYNC=False
            . venv/bin/activate
            export PYTHONPATH=$ROOT_DIR_SRC/erp/server/bin:$ROOT_DIR_SRC/erp/server/bin/addons:$ROOT_DIR_SRC/erp/server/sitecustomize
            cd $ROOT_DIR_SRC/powersms
            #destral --report-coverage --enable-coverage --report-junitxml $ROOT_DIR_SRC/test-results/destral
            echo $ROOT_DIR_SRC
            #echo powersms
            ls ~/src/erp/server/bin/addons
            destral -m powersms --report-coverage --enable-coverage --report-junitxml $ROOT_DIR_SRC/test-results/destral

      - run:
          name: coverage
          command: |
            export ROOT_DIR_SRC=~/src
            cd $ROOT_DIR_SRC
            . venv/bin/activate
            cd $ROOT_DIR_SRC/powersms
            coverage report
            coverage html
            coveralls

      - store_test_results:
          path: ~/src/test-results

      - store_artifacts:
          path: ~/src/test-results
          destination: destral

      - store_artifacts:
          path: ~/src/powersms/htmlcov
          destination: coverage

  test-py27:
    <<: *test-template
    docker:
      - image: circleci/python:2.7
      - image: redis:2.8
      - image: mongo:3.0
      - image: timescale/timescaledb-postgis:latest-pg11
        environment:
          POSTGRES_USER: erp
          POSTGRES_PASSWORD erp

  test-py37:
    <<: *test-template
    docker:
      - image: circleci/python:3.7
      - image: redis:2.8
      - image: mongo:3.0
      - image: timescale/timescaledb-postgis:latest-pg11
        environment:
          POSTGRES_USER: erp
          POSTGRES_PASSWORD: erp

workflows:
  version: 2
  test:
    jobs:
      - test-py27
      - test-py37
